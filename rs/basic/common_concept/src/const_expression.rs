/**
 * 常量表达式求值是在编译期完成的，编译器求值必须得到一个确定的结果，因此其值必须是常量
 * 常量上下文是编译器进行常量求值的唯一地方，包含
    - 常量值初始化位置
    - 静态数组的长度表达式 [T;N]
    - 重复的长度表达式，如：[0; 10]
    - 静态变量、枚举判别式的初始化位置
 * 常量上下文可接受的常量表达式目前只有三种类型：
    - const fn 函数
    - 元组结构体
    - 元组的值
*/

fn const_expr() {
    let an = (42,).0;
    // const AN: i32 = an; // 报错：在常量表达式中使用非常量，因为 an 是变量
    const AN: i32 = (42,).0; // 用字面量表达式为常量赋值，满足要求
}

// 常量函数，类似于 cpp 中的 constexpr
const fn gcd(a: u32, b: u32) -> u32 {
    match (a, b) {
        (x, 0) | (0, x) => x,

        (x, y) if x % 2 == 0 && y % 2 == 0 => 2 * gcd(x/2, y/2),
        (x, y) | (y, x) if x % 2 == 0 => gcd(x/2, y),

        (x, y) if x < y => gcd((y - x)/2, x),
        (x, y) => gcd((x - y)/2, y),
    }
}

// 对 gcd 的求值是在编译期完成的
const GCD: u32 = gcd(21, 7);

fn printGCD() {
    println!("{}", GCD);
}